{"version":3,"sources":["Event.js","EventList.js","mock-events.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleShowDetails","setState","this","className","props","event","name","local_date","onClick","description","Component","EventList","events","map","key","id","mockEvents","created","duration","date_in_series_pattern","status","time","local_time","updated","utc_offset","waitlist_count","yes_rsvp_count","venue","lat","lon","repinned","address_1","city","country","localized_country_name","zip","join_mode","urlname","who","localized_location","region","timezone","link","visibility","member_pay_fee","getSuggestions","query","a","async","window","location","href","startsWith","name_string","getAccessToken","token","url","axios","get","result","data","getEvents","localStorage","getItem","searchParams","URLSearchParams","search","code","getOrRenewAccessToken","type","tokenInfo","setItem","access_token","refresh_token","Date","now","CitySearch","suggestions","handleInputChanged","value","target","then","handleItemClicked","updateEvents","onChange","item","NumberOfEvents","numberOfEvents","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34cf7a13.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    // event: [], //not needed\r\n    showDetails: false\r\n  }\r\n\r\n  handleShowDetails = () => {\r\n    // this.setState({ showDetails: !this.state.showDetails }); //fails int tests\r\n    this.setState({ showDetails: true });\r\n  }\r\n\r\n  render() {\r\n    const showDetails = this.state.showDetails;\r\n\r\n    return(\r\n      <div className=\"event\">\r\n        <div className=\"event__Overview\">\r\n          <p className=\"event__Overview--name\">{this.props.event.name}</p>\r\n          <p className=\"event__Overview--localDate\">{this.props.event.local_date}</p>\r\n          {/*doesn't show # of people going, like in 4.4 screenshot*/}\r\n          <button onClick={() => this.handleShowDetails()}>show details</button>\r\n        </div>\r\n        {showDetails &&\r\n          <div className=\"event__Details\">\r\n            <p className=\"event__Details--description\">{this.props.event.description}</p>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {this.props.events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","//online converter is down - https://json-to-js.com/. And I don't know how to run the CLI version.\r\n\r\nconst mockEvents = {\r\n  city: {\r\n    id: 2459,\r\n    city: 'Newton Center',\r\n    lat: 42.31,\r\n    lon: -71.19,\r\n    state: 'MA',\r\n    country: 'us',\r\n    ip: '02459',\r\n    member_count: 417\r\n  },\r\n  events: [\r\n    {\r\n      created: 1521736237000,\r\n      duration: 5400000,\r\n      id: 'kvmmmpybcdbgb',\r\n      name: 'Placeholder for event 1',\r\n      date_in_series_pattern: false,\r\n      status: 'upcoming',\r\n      time: 1580860800000,\r\n      local_date: '2020-02-04',\r\n      local_time: '19:00',\r\n      updated: 1521736237000,\r\n      utc_offset: -18000000,\r\n      waitlist_count: 0,\r\n      yes_rsvp_count: 4,\r\n        venue: {\r\n        id: 918727,\r\n        name: 'Cambridge Friends Meeting House',\r\n        lat: 42.37584686279297,\r\n        lon: -71.12735748291016,\r\n        repinned: false,\r\n        address_1: '5 Longfellow Park',\r\n        city: 'Cambridge',\r\n        country: 'us',\r\n        localized_country_name: 'USA',\r\n        zip: '02138',\r\n        state: 'MA'\r\n      },\r\n      'group': {\r\n        created: 1343594111000,\r\n        name: 'Group1',\r\n        id: 4420182,\r\n        join_mode: 'open',\r\n        lat: 42.380001068115234,\r\n        lon: -71.12999725341797,\r\n        urlname: 'Cambridge-Buddhist-Meditation-Group',\r\n        who: 'Members',\r\n        localized_location: 'Cambridge, MA',\r\n        state: 'MA',\r\n        country: 'us',\r\n        region: 'en_US',\r\n        timezone: 'US/Eastern'\r\n        },\r\n        link: 'https://www.meetup.com/Cambridge-Buddhist-Meditation-Group/events/kvmmmpybcdbgb/',\r\n        description: 'placeholder desc here.',\r\n        visibility: 'public',\r\n        member_pay_fee: false\r\n    },\r\n    {\r\n      created: 1521736237000,\r\n      duration: 5400000,\r\n      id: 'kvmmmpybcdbgc',\r\n      name: 'Placeholder for event 2',\r\n      date_in_series_pattern: false,\r\n      status: 'upcoming',\r\n      time: 1580860800000,\r\n      local_date: '2020-02-04',\r\n      local_time: '19:00',\r\n      updated: 1521736237000,\r\n      utc_offset: -18000000,\r\n      waitlist_count: 0,\r\n      yes_rsvp_count: 4,\r\n        venue: {\r\n        id: 91872,\r\n        name: 'Cambridge Friends Meeting House',\r\n        lat: 42.37584686279297,\r\n        lon: -71.12735748291016,\r\n        repinned: false,\r\n        address_1: '5 Longfellow Park',\r\n        city: 'Cambridge',\r\n        country: 'us',\r\n        localized_country_name: 'USA',\r\n        zip: '02138',\r\n        state: 'MA'\r\n      },\r\n      'group': {\r\n        created: 1343594111000,\r\n        name: 'Group2',\r\n        id: 4420183,\r\n        join_mode: 'open',\r\n        lat: 42.380001068115235,\r\n        lon: -71.12999725341798,\r\n        urlname: 'Cambridge-Buddhist-Meditation-Group',\r\n        who: 'Members',\r\n        localized_location: 'Cambridge, MA',\r\n        state: 'MA',\r\n        country: 'us',\r\n        region: 'en_US',\r\n        timezone: 'US/Eastern'\r\n        },\r\n        link: 'https://www.meetup.com/Cambridge-Buddhist-Meditation-Group/events/kvmmmpybcdbgb/',\r\n        description: 'placeholder desc here.',\r\n        visibility: 'public',\r\n        member_pay_fee: false\r\n    }\r\n  ]\r\n}\r\n\r\nexport { mockEvents };\r\n","import { mockEvents } from './mock-events';\r\nimport axios from 'axios';\r\n\r\nasync function getSuggestions(query) {\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return [\r\n      {\r\n        city: 'Munich',\r\n        country: 'de',\r\n        localized_country_name: 'Germany',\r\n        name_string: 'Munich, Germany',\r\n        zip: 'meetup3',\r\n        lat: 48.14,\r\n        lon: 11.58\r\n      },\r\n      {\r\n        city: 'Munich',\r\n        country: 'us',\r\n        localized_country_name: 'USA',\r\n        state: 'ND',\r\n        name_string: 'Munich, North Dakota, USA',\r\n        zip: '58352',\r\n        lat: 48.66,\r\n        lon: -98.85\r\n      }\r\n    ];\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\r\n      + query\r\n      + '&access_token=' + token;\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  }\r\n  return [];\r\n}\r\n\r\nasync function getEvents(lat, lon) {\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return mockEvents.events;\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\r\n    + '&access_token=' + token;\r\n    // lat, lon is optional; if you have a lat and lon, you can add them\r\n    if (lat && lon) {\r\n      url += '&lat=' + lat + '&lon=' + lon;\r\n    }\r\n    const result = await axios.get(url);\r\n    return result.data.events;\r\n  }\r\n}\r\n\r\nasync function getAccessToken(){\r\n  const accessToken = localStorage.getItem('access_token');\r\n\r\n  if (!accessToken) {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = searchParams.get('code');\r\n\r\n    if (!code) {\r\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=3dssascu6mej4fuptij43jdbh4&response_type=code&redirect_uri=https://bxchang04.github.io/meetup_v2/';\r\n      return null;\r\n    }\r\n\r\n    return getOrRenewAccessToken('get', code);\r\n  }\r\n}\r\n\r\nasync function getOrRenewAccessToken(type, key) {\r\n  let url;\r\n  if (type === 'get') {\r\n    // Lambda endpoint to get token by code\r\n    url = 'https://b5zart0jw7.execute-api.eu-central-1.amazonaws.com/dev/api/token/'\r\n      + key;\r\n  } else if (type === 'renew') {\r\n    // Lambda endpoint to get token by refresh_token\r\n    url = 'https://b5zart0jw7.execute-api.eu-central-1.amazonaws.com/dev/api/refresh/'\r\n      + key;\r\n  }\r\n\r\n  // Use Axios to make a GET request to the endpoint\r\n  const tokenInfo = await axios.get(url);\r\n\r\n  // Save tokens to localStorage together with a timestamp\r\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n  localStorage.setItem('last_saved_time', Date.now());\r\n\r\n  // Return the access_token\r\n  return tokenInfo.data.access_token;\r\n}\r\n\r\nexport { getSuggestions, getEvents };\r\n","import React, { Component } from 'react';\r\nimport { getSuggestions } from './api';\r\n\r\nclass CitySearch extends Component {\r\n\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ query: value });\r\n    getSuggestions(value).then(suggestions => this.setState({ suggestions }));\r\n  }\r\n\r\n  handleItemClicked = (value, lat, lon) => {\r\n    this.setState({ query: value, suggestions: [] });\r\n    this.props.updateEvents(lat, lon);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map(item =>\r\n            <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>{item.name_string}</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n\r\n  state = {\r\n    numberOfEvents: 12\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ numberOfEvents: value });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"numberOfEvents\">\r\n        <label>Number of Events: </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"numberOfEvents__input\"\r\n          value={this.state.numberOfEvents}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents } from './api';\n\nclass App extends Component {\n\n  state = {\n    events: []\n  }\n\nupdateEvents = (lat, lon) => {\n    getEvents(lat, lon).then(events => this.setState({ events }));\n  }\n\n//loading events based on location, no lat/lon at first load.\n  componentDidMount(){\n    this.updateEvents(null, null)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch updateEvents={this.updateEvents} />\n        <EventList events={this.state.events}/>\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}